import type { Editor, EditorConfig, EventInfo } from 'ckeditor5';
import type { ExtractEditorType } from './types.js';
declare const _default: <TEditor extends {
    create(...args: any[]): Promise<Editor>;
}>(__VLS_props: {
    "onUpdate:modelValue"?: ((data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
    onReady?: ((editor: ExtractEditorType<TEditor>) => any) | undefined;
    onDestroy?: (() => any) | undefined;
    onBlur?: ((event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
    onFocus?: ((event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
    onInput?: ((data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
    modelValue?: string | undefined;
    editor: TEditor;
    config?: EditorConfig | undefined;
    tagName?: string | undefined;
    disabled?: boolean | undefined;
    disableTwoWayDataBinding?: boolean | undefined;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, __VLS_ctx?: {
    slots: {};
    attrs: any;
    emit: ((evt: "update:modelValue", data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "ready", editor: ExtractEditorType<TEditor>) => void) & ((evt: "destroy") => void) & ((evt: "blur", event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "focus", event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "input", data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "update:modelValue", modelValue: string) => void);
} | undefined, __VLS_expose?: ((exposed: import("vue").ShallowUnwrapRef<{
    instance: import("vue").Ref<ExtractEditorType<TEditor> | undefined>;
    lastEditorData: import("vue").Ref<string | undefined>;
}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        "onUpdate:modelValue"?: ((data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
        onReady?: ((editor: ExtractEditorType<TEditor>) => any) | undefined;
        onDestroy?: (() => any) | undefined;
        onBlur?: ((event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
        onFocus?: ((event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
        onInput?: ((data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
        modelValue?: string | undefined;
        editor: TEditor;
        config?: EditorConfig | undefined;
        tagName?: string | undefined;
        disabled?: boolean | undefined;
        disableTwoWayDataBinding?: boolean | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        instance: import("vue").Ref<ExtractEditorType<TEditor> | undefined>;
        lastEditorData: import("vue").Ref<string | undefined>;
    }>): void;
    attrs: any;
    slots: {};
    emit: ((evt: "update:modelValue", data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "ready", editor: ExtractEditorType<TEditor>) => void) & ((evt: "destroy") => void) & ((evt: "blur", event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "focus", event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "input", data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "update:modelValue", modelValue: string) => void);
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            "onUpdate:modelValue"?: ((data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
            onReady?: ((editor: ExtractEditorType<TEditor>) => any) | undefined;
            onDestroy?: (() => any) | undefined;
            onBlur?: ((event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
            onFocus?: ((event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
            onInput?: ((data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => any) | undefined;
            modelValue?: string | undefined;
            editor: TEditor;
            config?: EditorConfig | undefined;
            tagName?: string | undefined;
            disabled?: boolean | undefined;
            disableTwoWayDataBinding?: boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import("vue").ShallowUnwrapRef<{
            instance: import("vue").Ref<ExtractEditorType<TEditor> | undefined>;
            lastEditorData: import("vue").Ref<string | undefined>;
        }>): void;
        attrs: any;
        slots: {};
        emit: ((evt: "update:modelValue", data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "ready", editor: ExtractEditorType<TEditor>) => void) & ((evt: "destroy") => void) & ((evt: "blur", event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "focus", event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "input", data: string, event: EventInfo<string, unknown>, editor: ExtractEditorType<TEditor>) => void) & ((evt: "update:modelValue", modelValue: string) => void);
    } | undefined;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
