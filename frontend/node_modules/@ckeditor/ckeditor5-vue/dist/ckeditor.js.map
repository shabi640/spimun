{"version":3,"file":"ckeditor.js","sources":["../src/plugins/VueIntegrationUsageDataPlugin.ts","../src/plugins/appendAllIntegrationPluginsToConfig.ts","../src/ckeditor.vue","../src/composables/useAsync.ts","../src/useCKEditorCloud.ts","../src/plugin.ts"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { version } from 'vue';\n\nimport { createIntegrationUsageDataPlugin } from '@ckeditor/ckeditor5-integrations-common';\n\n/**\n * This part of the code is not executed in open-source implementations using a GPL key.\n * It only runs when a specific license key is provided. If you are uncertain whether\n * this applies to your installation, please contact our support team.\n */\nexport const VueIntegrationUsageDataPlugin = createIntegrationUsageDataPlugin(\n\t'vue',\n\t{\n\t\tversion: __VUE_INTEGRATION_VERSION__,\n\t\tframeworkVersion: version\n\t}\n);\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { appendExtraPluginsToEditorConfig, isCKEditorFreeLicense } from '@ckeditor/ckeditor5-integrations-common';\nimport type { EditorConfig } from 'ckeditor5';\n\nimport { VueIntegrationUsageDataPlugin } from './VueIntegrationUsageDataPlugin.js';\n\n/**\n * Appends all integration plugins to the editor configuration.\n *\n * @param editorConfig The editor configuration.\n * @returns The editor configuration with all integration plugins appended.\n */\nexport function appendAllIntegrationPluginsToConfig( editorConfig: EditorConfig ): EditorConfig {\n\t/**\n\t * Do not modify the editor configuration if the editor is using a free license.\n\t */\n\tif ( isCKEditorFreeLicense( editorConfig.licenseKey ) ) {\n\t\treturn editorConfig;\n\t}\n\n\treturn appendExtraPluginsToEditorConfig( editorConfig, [\n\t\t/**\n\t\t * This part of the code is not executed in open-source implementations using a GPL key.\n\t\t * It only runs when a specific license key is provided. If you are uncertain whether\n\t\t * this applies to your installation, please contact our support team.\n\t\t */\n\t\tVueIntegrationUsageDataPlugin\n\t] );\n}\n","<template>\n  <component\n    :is=\"tagName\"\n    ref=\"element\"\n  />\n</template>\n\n<script\n\tsetup\n\tlang=\"ts\"\n\tgeneric=\"TEditor extends { create( ...args: any[] ): Promise<Editor> }\"\n>\nimport { debounce } from 'lodash-es';\nimport {\n\tref,\n\twatch,\n\tmarkRaw,\n\tonMounted,\n\tonBeforeUnmount\n} from 'vue';\nimport type { Editor, EditorConfig, EventInfo } from 'ckeditor5';\nimport type { Props, ExtractEditorType } from './types.js';\n\nimport { appendAllIntegrationPluginsToConfig } from './plugins/appendAllIntegrationPluginsToConfig.js';\n\ntype EditorType = ExtractEditorType<TEditor>;\n\ndefineOptions( {\n\tname: 'CKEditor'\n} );\n\nconst model = defineModel( 'modelValue', { type: String, default: '' } );\n\nconst props = withDefaults( defineProps<Props<TEditor>>(), {\n\tconfig: () => ( {} ),\n\ttagName: 'div',\n\tdisabled: false,\n\tdisableTwoWayDataBinding: false\n} );\n\nconst emit = defineEmits<{\n\tready: [ editor: EditorType ],\n\tdestroy: [],\n\tblur: [ event: EventInfo, editor: EditorType ],\n\tfocus: [ event: EventInfo, editor: EditorType ],\n\tinput: [ data: string, event: EventInfo, editor: EditorType ],\n\t'update:modelValue': [ data: string, event: EventInfo, editor: EditorType ],\n}>();\n\nconst VUE_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from Vue integration (@ckeditor/ckeditor5-vue)';\nconst INPUT_EVENT_DEBOUNCE_WAIT = 300;\n\nconst element = ref<HTMLElement>();\nconst instance = ref<EditorType>();\nconst lastEditorData = ref<string>();\n\ndefineExpose( {\n\tinstance,\n\tlastEditorData\n} );\n\nwatch( model, newModel => {\n\t// Synchronize changes of #modelValue. There are two sources of changes:\n\t//\n\t//                External modelValue change      ──────╮\n\t//                                                      ╰─────> ┏━━━━━━━━━━━┓\n\t//                                                              ┃ Component ┃\n\t//                                                      ╭─────> ┗━━━━━━━━━━━┛\n\t//                   Internal data change         ──────╯\n\t//             (typing, commands, collaboration)\n\t//\n\t// Case 1: If the change was external (via props), the editor data must be synced with\n\t// the component using instance#setData() and it is OK to destroy the selection.\n\t//\n\t// Case 2: If the change is the result of internal data change, the #modelValue is the\n\t// same as this.lastEditorData, which has been cached on #change:data. If we called\n\t// instance#setData() at this point, that would demolish the selection.\n\t//\n\t// To limit the number of instance#setData() which is time-consuming when there is a\n\t// lot of data we make sure:\n\t//    * the new modelValue is at least different than the old modelValue (Case 1.)\n\t//    * the new modelValue is different than the last internal instance state (Case 2.)\n\t//\n\t// See: https://github.com/ckeditor/ckeditor5-vue/issues/42.\n\tif ( instance.value && newModel !== lastEditorData.value ) {\n\t\tinstance.value.data.set( newModel );\n\t}\n} );\n\nwatch( () => props.disabled, readOnlyMode => {\n\tif ( readOnlyMode ) {\n\t\tinstance.value!.enableReadOnlyMode( VUE_INTEGRATION_READ_ONLY_LOCK_ID );\n\t} else {\n\t\tinstance.value!.disableReadOnlyMode( VUE_INTEGRATION_READ_ONLY_LOCK_ID );\n\t}\n} );\n\nfunction checkVersion(): void {\n\tconst version = window.CKEDITOR_VERSION;\n\n\tif ( !version ) {\n\t\treturn console.warn( 'Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.' );\n\t}\n\n\tconst [ major ] = version.split( '.' ).map( Number );\n\n\tif ( major >= 42 || version.startsWith( '0.0.0' ) ) {\n\t\treturn;\n\t}\n\n\tconsole.warn( 'The <CKEditor> component requires using CKEditor 5 in version 42+ or nightly build.' );\n}\n\nfunction setUpEditorEvents( editor: EditorType ) {\n\t// Use the leading edge so the first event in the series is emitted immediately.\n\t// Failing to do so leads to race conditions, for instance, when the component modelValue\n\t// is set twice in a time span shorter than the debounce time.\n\t// See https://github.com/ckeditor/ckeditor5-vue/issues/149.\n\tconst emitDebouncedInputEvent = debounce( ( evt: EventInfo ) => {\n\t\tif ( props.disableTwoWayDataBinding ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Cache the last editor data. This kind of data is a result of typing,\n\t\t// editor command execution, collaborative changes to the document, etc.\n\t\t// This data is compared when the component modelValue changes in a 2-way binding.\n\t\tconst data = lastEditorData.value = editor.data.get();\n\n\t\t// The compatibility with the v-model and general Vue.js concept of input–like components.\n\t\temit( 'update:modelValue', data, evt, editor );\n\t\temit( 'input', data, evt, editor );\n\t}, INPUT_EVENT_DEBOUNCE_WAIT, { leading: true } );\n\n\t// Debounce emitting the #input event. When data is huge, instance#getData()\n\t// takes a lot of time to execute on every single key press and ruins the UX.\n\t//\n\t// See: https://github.com/ckeditor/ckeditor5-vue/issues/42\n\teditor.model.document.on( 'change:data', emitDebouncedInputEvent );\n\n\teditor.editing.view.document.on( 'focus', ( evt: EventInfo ) => {\n\t\temit( 'focus', evt, editor );\n\t} );\n\n\teditor.editing.view.document.on( 'blur', ( evt: EventInfo ) => {\n\t\temit( 'blur', evt, editor );\n\t} );\n}\n\ncheckVersion();\n\nonMounted( () => {\n\t// Clone the config first so it never gets mutated (across multiple editor instances).\n\t// https://github.com/ckeditor/ckeditor5-vue/issues/101\n\tconst editorConfig: EditorConfig = appendAllIntegrationPluginsToConfig(\n\t\tObject.assign( {}, props.config )\n\t);\n\n\tif ( model.value ) {\n\t\teditorConfig.initialData = model.value;\n\t}\n\n\t( props.editor.create( element.value, editorConfig ) as unknown as Promise<EditorType> )\n\t\t.then( editor => {\n\t\t\t// Save the reference to the instance for further use.\n\t\t\tinstance.value = markRaw( editor );\n\n\t\t\tsetUpEditorEvents( editor );\n\n\t\t\t// Synchronize the editor content. The #modelValue may change while the editor is being created, so the editor content has\n\t\t\t// to be synchronized with these potential changes as soon as it is ready.\n\t\t\tif ( model.value !== editorConfig.initialData ) {\n\t\t\t\teditor.data.set( model.value );\n\t\t\t}\n\n\t\t\t// Set initial disabled state.\n\t\t\tif ( props.disabled ) {\n\t\t\t\teditor.enableReadOnlyMode( VUE_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t}\n\n\t\t\t// Let the world know the editor is ready.\n\t\t\temit( 'ready', editor );\n\t\t} )\n\t\t.catch( error => {\n\t\t\tconsole.error( error );\n\t\t} );\n} );\n\nonBeforeUnmount( () => {\n\tif ( instance.value ) {\n\t\tinstance.value.destroy();\n\t\tinstance.value = undefined;\n\t}\n\n\t// Note: By the time the editor is destroyed (promise resolved, editor#destroy fired)\n\t// the Vue component will not be able to emit any longer. So emitting #destroy a bit earlier.\n\temit( 'destroy' );\n} );\n</script>\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport {\n\tcomputed, ref,\n\tshallowReadonly, watchEffect,\n\ttype ComputedRef, type Ref\n} from 'vue';\n\nimport { uid } from '@ckeditor/ckeditor5-integrations-common';\n\n/**\n * A composable that executes an async function and provides the result.\n *\n * @param asyncFunc The async function to execute.\n * @returns The result of the async function.\n * @example\n *\n * ```ts\n * const { loading, data, error } = useAsync( async () => {\n * \tconst response = await fetch( 'https://api.example.com/data' );\n * \treturn response.json();\n * } );\n * ```\n */\nexport const useAsync = <R>(\n\tasyncFunc: () => Promise<R>\n): AsyncComposableResult<R> => {\n\t// The UUID of the last query to prevent race conditions between multiple queries.\n\tconst lastQueryUUID = ref<string | null>( null );\n\n\t// The error thrown by the async function.\n\tconst error = ref<Error | null>( null );\n\n\t// The data returned by the async function.\n\tconst data: Ref<R | null> = ref( null );\n\n\t// Whether the async function is currently loading.\n\tconst loading = computed( () => lastQueryUUID.value !== null );\n\n\t// Execute the async function and update the result. This will be re-executed\n\t// whenever refs used inside the `asyncFunc` change.\n\twatchEffect( async () => {\n\t\tconst currentQueryUID = uid();\n\n\t\tlastQueryUUID.value = currentQueryUID;\n\t\tdata.value = null;\n\t\terror.value = null;\n\n\t\t// This function is called before updating `data`, `error` or `loading`\n\t\t// because the `watchEffect` could be re-triggered with the new data\n\t\t// while waiting for the previous `asyncFunc` to resolve.\n\t\tconst shouldDiscardQuery = () => lastQueryUUID.value !== currentQueryUID;\n\n\t\ttry {\n\t\t\tconst result = await asyncFunc();\n\n\t\t\tif ( !shouldDiscardQuery() ) {\n\t\t\t\tdata.value = result;\n\t\t\t}\n\t\t} catch ( err: any ) {\n\t\t\tif ( !shouldDiscardQuery() ) {\n\t\t\t\terror.value = err;\n\t\t\t}\n\t\t} finally {\n\t\t\tif ( !shouldDiscardQuery() ) {\n\t\t\t\tlastQueryUUID.value = null;\n\t\t\t}\n\t\t}\n\t} );\n\n\treturn {\n\t\tloading: shallowReadonly( loading ),\n\t\tdata: shallowReadonly( data ),\n\t\terror: shallowReadonly( error )\n\t};\n};\n\n/**\n * The result of the `useAsync` composable.\n */\nexport type AsyncComposableResult<R> = {\n\n\t/**\n\t * Whether the async function is currently loading.\n\t */\n\tloading: ComputedRef<boolean>;\n\n\t/**\n\t * \tThe data returned by the async function.\n\t */\n\tdata: Ref<R | null>;\n\n\t/**\n\t * The error thrown by the async function.\n\t */\n\terror: Ref<Error | null>;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { toValue, type MaybeRefOrGetter } from 'vue';\nimport { useAsync, type AsyncComposableResult } from './composables/useAsync.js';\n\nimport {\n\tloadCKEditorCloud,\n\ttype CKEditorCloudConfig,\n\ttype CKEditorCloudResult\n} from '@ckeditor/ckeditor5-integrations-common';\n\n/**\n * A composable function that loads CKEditor Cloud services.\n *\n * @param config The configuration of the CKEditor Cloud services.\n * @returns The result of the loaded CKEditor Cloud services.\n * @template Config The type of the CKEditor Cloud configuration.\n * @example\n * ```ts\n * const { data } = useCKEditorCloud( {\n * \tversion: '43.0.0',\n * \tlanguages: [ 'en', 'de' ],\n * \tpremium: true\n * } );\n *\n * if ( data.value ) {\n * \tconst { CKEditor, CKEditorPremiumFeatures } = data.value;\n * \tconst { Paragraph } = CKEditor;\n *\n * \t// ..\n * }\n */\nexport default function useCKEditorCloud<Config extends CKEditorCloudConfig>(\n\tconfig: MaybeRefOrGetter<Config>\n): AsyncComposableResult<CKEditorCloudResult<Config>> {\n\treturn useAsync(\n\t\t(): Promise<CKEditorCloudResult<Config>> => loadCKEditorCloud(\n\t\t\ttoValue( config )\n\t\t)\n\t);\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* eslint-env browser */\nimport * as Vue from 'vue';\nimport Ckeditor from './ckeditor.vue';\n\n/* istanbul ignore if -- @preserve */\nif ( !Vue.version || !Vue.version.startsWith( '3.' ) ) {\n\tthrow new Error(\n\t\t'The CKEditor plugin works only with Vue 3+. ' +\n\t\t'For more information, please refer to ' +\n\t\t'https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/vuejs-v3.html'\n\t);\n}\n\nconst CkeditorPlugin = {\n\t/**\n\t * Installs the plugin, registering the `<ckeditor>` component.\n\t *\n\t * @param app The application instance.\n\t */\n\tinstall( app: Vue.App ): void {\n\t\tapp.component( 'Ckeditor', Ckeditor );\n\t}\n};\n\n/**\n * The component is exported as `Ckeditor` and not `CKEditor`, because of how Vue handles components with\n * capitalized names. The component with more than one consecutive capital letter will also be be available\n * in kebab-case, where each capital letter is separated by `-`. This way, the `CKEditor` component will\n * be available as `c-k-editor`, which doesn't look good.\n */\nexport {\n\tCkeditorPlugin,\n\tCkeditor\n};\n\n/**\n * CDN related exports.\n */\n\nexport { default as useCKEditorCloud } from './useCKEditorCloud.js';\n\nexport {\n\tloadCKEditorCloud,\n\ttype CKEditorCloudResult,\n\ttype CKEditorCloudConfig,\n\ttype CdnPluginsPacks\n} from '@ckeditor/ckeditor5-integrations-common';\n\ndeclare module 'vue' {\n\tinterface GlobalComponents {\n\t\tCkeditor: typeof Ckeditor;\n\t\tckeditor: typeof Ckeditor;\n\t}\n}\n"],"names":["_useModel","version","Ckeditor"],"mappings":"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"}